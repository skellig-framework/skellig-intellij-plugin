{
  parserClass="org.skellig.plugin.parser.feature.SkelligFeatureParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="SkelligFeature"
  psiImplClassSuffix="Impl"
  psiPackage="org.skellig.plugin.language.feature.psi"
  psiImplPackage="org.skellig.plugin.language.feature.psi.impl"

  elementTypeHolderClass="org.skellig.plugin.language.feature.psi.SkelligFeatureTypes"
  elementTypeClass="org.skellig.plugin.language.feature.psi.SkelligFeatureElementType"
  tokenTypeClass="org.skellig.plugin.language.feature.psi.SkelligFeatureTokenType"

  psiImplUtilClass="org.skellig.plugin.language.feature.psi.SkelligFeatureStepsUtil"

   tokens = [
          symbols = 'regexp:[;+&"?#!\\*\w,_-]+'
//          space = 'regexp:[\ \n\t\f]+'
          space = 'regexp:\s+'
          comment='regexp://.*'
          block_comment='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
          string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
          l_param="<"
          r_param=">"
          param_separator="|"
          tag_regex="regexp:@[a-zA-Z0-9_]+"
          param_regex="regexp:<[a-zA-Z0-9_-]+>"
          colon=":"
      ]
}

root ::= feature_def*
feature_def ::= tag_def feature scenario_def
feature ::= feature_keyword text_or_string+

scenario_def ::= scenario*
scenario ::= tag_def test_keyword symbols_or_params+ /*space**/ step_def /*lines_to_keyword white*/ data_def? /*white*/

tag_def ::= tag_regex*

step_def ::= steps_keyword step*
step ::= symbols_or_params+ table?
{
 mixin="org.skellig.plugin.language.feature.psi.SkelligFeatureStepElementImpl"
 implements="org.skellig.plugin.language.feature.psi.SkelligFeatureStepElement"
 methods=[getName getNameIdentifier]
}

data_def ::=  data_keyword table

cell ::= symbols_or_params param_separator
row ::= param_separator cell+
table ::= row+
private symbols_or_params ::= ((param_regex)|text_or_string)

feature_keyword ::= Name colon
data_keyword ::= Data colon
test_keyword ::= Test colon
steps_keyword ::= Steps colon

lines_to_keyword ::= (!(eol  reserved_words_and_symbols) text_or_string)*
reserved_words_and_symbols ::= keyword_space | test_keyword | table | tag
//space ::= ' ' | '\t'
eol ::= '\r'? '\n'
text_or_string ::= (symbols|string|' ')

/*root ::= definition*

definition ::= (stepsDef|paramsDef*)

stepsDef ::= keywords (symbols|':')*

//paramsDef ::= (paramSeparator|symbols)* white
paramsDef ::= table

keywords ::= (Name | Test | Data)

paramSeparator ::= '|'

table ::= row+
cell ::= '[^\r\n|]'+ '|'
row ::= space* '|' cell+ eol

white ::= (space | eol)*
space ::= ' ' | '\t'
eol ::= '\r'? '\n'*/

/*
//comment
@Tag1
Name: "Tests feature"

   @Tag2
   @Tag1_2 @Tag3
   Test: Tests scenario
   Steps:
      Given something
      Run "<name>" something <f-d>
      "Validate something"
       | k1    |v2 | v3| v4|
      Log result
       | k1    |v2 |
       | <k_1> |"v3."|

   @Tag3
   Test: Another test scenario
   Steps:
      Given value is <value>,
      Run function with <value>
      Validate result is <expected>
   Data:
      |value|expected|
      | v1  | <e_1>  |
      | v2  | e2     |

  Test :Scenario <fg> ddg
  Steps:
       Step 1<fd>
       Another step
       | a | b |
       Another step
*/