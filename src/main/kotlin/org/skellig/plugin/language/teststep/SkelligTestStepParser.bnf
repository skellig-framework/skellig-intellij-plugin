{
  parserClass="org.skellig.plugin.language.teststep.SkelligTestStepParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="SkelligTestStep"
  psiImplClassSuffix="Impl"
  psiPackage="org.skellig.plugin.language.teststep.psi"
  psiImplPackage="org.skellig.plugin.language.teststep.psi.impl"
  psiImplUtilClass="org.skellig.plugin.language.teststep.SkelligTestStepPsiImplUtil"

   elementTypeHolderClass="org.skellig.plugin.language.teststep.psi.SkelligTestStepTypes"
   elementTypeClass="org.skellig.plugin.language.teststep.psi.SkelligTestStepElementType"
   tokenTypeClass="org.skellig.plugin.language.teststep.psi.SkelligTestStepTokenType"

   tokens=[
      FLOAT= "regexp:[0-9]+'.'[0-9]+"
      INT= "regexp:[0-9]+"
      NAME= "name"
      ID= "regexp:[a-zA-Z0-9\-_]+"
      VALUE_ASSIGN = "="
      LESSER_EQUAL= "<="
      GREATER_EQUAL= ">="
      EQUAL= "=="
      NOT_EQUAL= "!="
      COMMA= ","
      REFERENCE_BRACKET= "${"
      OBJECT_L_BRACKET= "{"
      OBJECT_R_BRACKET= "}"
      FUNCTION_L_BRACKET= "("
      FUNCTION_R_BRACKET= ")"
      ARRAY_L_BRACKET= "["
      ARRAY_R_BRACKET= "]"
      KEY_SYMBOLS= "regexp:[._\-&'%$£!?`¬#~@\\:]+"
      KEYWORDS= "regexp:(variables | validate | payload | body | request | message)"
      VALUE_SYMBOLS= "regexp:[><|+/*]+"
      STRING= 'regexp:"[^"\\]*(\\.[^"\\]*)*"'
      NEWLINE= "regexp:\r?\n"
      COMMENT = "regexp://.*"  // Skip comments
      WS=" " // Skip whitespace
    ]
}

file ::= testStepNameExpression*
testStepNameExpression ::= NEWLINE* testNameKeyword FUNCTION_L_BRACKET testStepName FUNCTION_R_BRACKET NEWLINE* OBJECT_L_BRACKET NEWLINE* pair* NEWLINE* OBJECT_R_BRACKET NEWLINE*
testNameKeyword ::= NAME
testStepName ::= STRING
pair ::= key (VALUE_ASSIGN value | map | array) NEWLINE*
key ::= keyExpression+
value ::= expression+
values ::= value | map | array
array ::= NEWLINE* ARRAY_L_BRACKET NEWLINE* (values (COMMA NEWLINE? values)*)? NEWLINE* ARRAY_R_BRACKET NEWLINE*
map ::= NEWLINE* OBJECT_L_BRACKET NEWLINE* pair* NEWLINE* OBJECT_R_BRACKET

keyExpression ::= propertyExpression | functionExpression | KEYWORDS | KEY_SYMBOLS | STRING | ID | NAME
expression ::= keyExpression | FUNCTION_L_BRACKET expression+ FUNCTION_R_BRACKET | VALUE_SYMBOLS | LESSER_EQUAL | GREATER_EQUAL | EQUAL | NOT_EQUAL | number
functionExpression ::= functionName FUNCTION_L_BRACKET arg (COMMA arg)* FUNCTION_R_BRACKET
functionName ::= ID
arg ::= expression*
propertyExpression ::= REFERENCE_BRACKET referenceKey (COMMA expression*)? OBJECT_R_BRACKET
referenceKey ::= (ID|INT)
number ::= FLOAT | INT
