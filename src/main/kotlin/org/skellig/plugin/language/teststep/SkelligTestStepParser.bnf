{
  parserClass="org.skellig.plugin.language.teststep.SkelligTestStepParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="SkelligTestStep"
  psiImplClassSuffix="Impl"
  psiPackage="org.skellig.plugin.language.teststep.psi"
  psiImplPackage="org.skellig.plugin.language.teststep.psi.impl"

   elementTypeHolderClass="org.skellig.plugin.language.teststep.psi.SkelligTestStepTypes"
   elementTypeClass="org.skellig.plugin.language.teststep.psi.SkelligTestStepElementType"
   tokenTypeClass="org.skellig.plugin.language.teststep.psi.SkelligTestStepTokenType"

   psiImplUtilClass="org.skellig.plugin.language.teststep.SkelligTestStepPsiImplUtil"

   tokens=[
      FLOAT= "regexp:[0-9]+'.'[0-9]+"
      INT= "regexp:[0-9]+"
      NAME= "name"
      ID= "regexp:[a-zA-Z0-9_]+"
      VALUE_ASSIGN = "="
      LESSER_EQUAL= "<="
      GREATER_EQUAL= ">="
      EQUAL= "=="
      NOT_EQUAL= "!="
      COMMA= ","
      DOT= "."
      REFERENCE_BRACKET= "${"
      OBJECT_L_BRACKET= "{"
      OBJECT_R_BRACKET= "}"
      FUNCTION_L_BRACKET= "("
      FUNCTION_R_BRACKET= ")"
      ARRAY_L_BRACKET= "["
      ARRAY_R_BRACKET= "]"
      KEY_SYMBOLS= "regexp:[_\-&'%$£!?`¬#~@\\:]+"
      VALUES= "values"
      VALIDATE= "validate"
      WHERE= "where"
      PAYLOAD= "payload"
      BODY= "body"
      MESSAGE= "message"
      REQUEST= "request"
      VALUE_SYMBOLS= "regexp:[><|+/*]+"
      STRING= 'regexp:"[^"\\]*(\\.[^"\\]*)*"'
      NEWLINE= "regexp:\r?\n"
      COMMENT = "regexp://[^\n]*[\n\r]*" // Skip comments
      WHITE_SPACE=" " // Skip whitespace
    ]
}

file ::= testStepNameExpression*
testStepNameExpression ::= NEWLINE* testNameKeyword FUNCTION_L_BRACKET testStepName FUNCTION_R_BRACKET NEWLINE* OBJECT_L_BRACKET NEWLINE* pair* NEWLINE* OBJECT_R_BRACKET NEWLINE* {
 name = "Test Step declaration"
}
testNameKeyword ::= NAME {
  name = "name"
}
testStepName ::= STRING {
  name = "Test Step name"
  methods=[getName setName getNameIdentifier getPresentation]
}
pair ::= key (VALUE_ASSIGN value | map | array) NEWLINE* {
  name = "Property [= Value | { } | [ ] ] pair"
}
key ::= expression+ {
  methods=[getPresentation]
}

value ::= expression+
allValues ::= value | map | array {
    name = "Value or Map or Array declaration"
}

array ::= NEWLINE* ARRAY_L_BRACKET NEWLINE* (allValues (COMMA NEWLINE? allValues)*)? NEWLINE* ARRAY_R_BRACKET NEWLINE* {
  name = "Array declaration"
}
map ::= NEWLINE* OBJECT_L_BRACKET NEWLINE* pair* NEWLINE* OBJECT_R_BRACKET {
   name = "Map declaration"
}

expression ::= referenceExpression | functionExpression | testStepPropertyKeywords | KEY_SYMBOLS | STRING | ID | NAME | DOT | FUNCTION_L_BRACKET expression+ FUNCTION_R_BRACKET | VALUE_SYMBOLS | LESSER_EQUAL | GREATER_EQUAL | EQUAL | NOT_EQUAL | number {
    name = "Property, Value or Expression declaration"
}
functionExpression ::= functionName FUNCTION_L_BRACKET arg (COMMA arg)* FUNCTION_R_BRACKET {
 name = "Function declaration"
 methods=[getReference]
}
functionName ::= ID {
 name = "Function name"
}
testStepPropertyKeywords ::= (VALUES | VALIDATE | WHERE | PAYLOAD | BODY | MESSAGE | REQUEST) {
  name = "Test Step keywords"
}
arg ::= expression* {
  name = "Function arguments"
}
referenceExpression ::= REFERENCE_BRACKET referenceKey+ (COMMA expression*)? OBJECT_R_BRACKET

referenceKey ::= (referenceExpression | ID| INT | STRING |'+') {
  name = "Reference name"
  methods=[getReference]
}
number ::= FLOAT | INT